[[https://opensource.org/licenses/BSD-2-Clause][https://img.shields.io/badge/license-BSD-blue.svg]]
[[http://melpa.org/#/xterm-color][https://melpa.org/packages/xterm-color-badge.svg]]
[[http://stable.melpa.org/#/xterm-color][https://stable.melpa.org/packages/xterm-color-badge.svg]]

xterm-color.el is an ANSI control sequence to text-property translator

* Features
+ Regular ANSI color support
+ XTERM 256 color support
+ AIXTERM bright foreground color
+ AIXTERM bright background color (since 1.8)
+ Use bold instead of bright (since 1.8)
+ Works with compilation-mode
+ Works with eshell
+ Bonus: Faster than ansi-color.el

* Usage 
Interactively or from Emacs Lisp, call xterm-color-colorize-buffer to colorize an entire buffer.

In Emacs Lisp code call xterm-color-filter to propertize strings that you can then insert into
a buffer. All state is kept in buffer-local variables which means that
control sequences can span /xterm-color-filter/ call boundaries.

You may customize /xterm-color-debug/ (default NIL, if T you will get warnings in *Messages* when
unsupported escape sequences are encountered), /xterm-color-use-bold-for-bright/ (default NIL),
/xterm-color-names/,  /xterm-color-names-bright/. Additionally, you may set
/xterm-color-preserve-properties/ to T (default NIL, should be set to T if using xterm-color with
eshell, see below). A buffer-local face attribute cache is used since 1.8 to improve performance.
This means that if you change /xterm-color-names/ or /xterm-color-names-bright/ or
/xterm-color-use-bold-for-bright/ at runtime and want the changes to take effect in a pre-existing
buffer with activated xterm-color, you will need to run /xterm-color-clear-cache/ in relevant buffer.

Example:

#+BEGIN_SRC emacs-lisp
(let ((buffer (generate-new-buffer "*xterm-color-test*")))
  (with-current-buffer buffer
    (insert (xterm-color-filter "[0;1;3;4"))
    (insert (xterm-color-filter ";35"))
    (insert (xterm-color-filter ";51mThis is only a test"))
    (insert (xterm-color-filter "[0m")))
  (switch-to-buffer buffer))
#+END_SRC

If you are inserting into a buffer that has activated font locking, you
*NO LONGER* need to set /font-lock-unfontify-region-function/ to
/xterm-color-unfontify-region/ as the latter has been removed.

You can replace ansi-color.el with xterm-color for all comint buffers,
but this may create problems with modes that propertize strings and
feed them through comint-preoutput-filter-functions since xterm-color-filter
will strip all text properties.

The recommended configuration is to remove ansi-color-process-output from
comint-output-filter-functions and add xterm-color-filter as the *first*
hook in the buffer-local comint-preoutput-filter-functions for any comint-based
mode that you would like it to affect (e.g. shell-mode).

An example configuration for shell-mode (M-x shell) is shown below:

#+BEGIN_SRC emacs-lisp
(setq comint-output-filter-functions
      (remove 'ansi-color-process-output comint-output-filter-functions))

(add-hook 'shell-mode-hook
          (lambda () (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter nil t)))

;; Also set TERM accordingly (xterm-256color)

;; You can also use it with eshell (and thus get color output from system ls):

(require 'eshell)

(add-hook 'eshell-before-prompt-hook
          (lambda ()
            (setq xterm-color-preserve-properties t)))

(add-to-list 'eshell-preoutput-filter-functions 'xterm-color-filter)
(setq eshell-output-filter-functions (remove 'eshell-handle-ansi-color eshell-output-filter-functions))

;;  Don't forget to setenv TERM xterm-256color

#+END_SRC

You may use `compilation-shell-minor-mode' with shell-mode buffers
and the configuration previously described.

For standalone compilation buffers use the following configuration:

#+BEGIN_SRC emacs-lisp
(setq compilation-environment '("TERM=xterm-256color"))

(add-hook 'compilation-start-hook
          (lambda (proc)
            ;; We need to differentiate between compilation-mode buffers
            ;; and running as part of comint (which at this point we assume
            ;; has been configured separately for xterm-color)
            (when (eq (process-filter proc) 'compilation-filter)
              ;; This is a process associated with a compilation-mode buffer.
              ;; We may call `xterm-color-filter' before its own filter function.
              (set-process-filter
               proc
               (lambda (proc string)
                 (funcall 'compilation-filter proc
                          (xterm-color-filter string)))))))
#+END_SRC

Standalone compilation-mode buffer support is experimental, report any
issues that may arise.

* Test
#+BEGIN_SRC emacs-lisp
M-x xterm-color-test

For comint or eshell:

M-x shell || M-x eshell

perl tests/xterm-colortest && perl tests/256colors2.pl

#+END_SRC

[[file:img/xterm-color.png][file:img/xterm-thumb.png]]  [[file:img/godwars2.png][file:img/godwars2-thumb.png]]

* License
The code comes with a BSD-style license so you can basically do with it
whatever you want.

* Author
xristos (AT) sdf (DOT) lonestar (DOT) org
